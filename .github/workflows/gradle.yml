name: GOODEAT Backend CI

on:
  push:
    branches:
      -main
  pull_request:
    types: [ "closed" ]
    branches:
      -main
  workflow_dispatch:

env:
  S3_BUCKET_NAME: goodeat-build
  CODE_DEPLOY_APP_NAME: goodeat
  CODE_DEPLOY_GROUP_NAME: goodeat-group

jobs:
  build:
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    # 1. vm에서 repository 내려받기
    - uses: actions/checkout@v4

    # 2. vm에 jdk 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. gradle 세팅
    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ec92e829475ac0c2315ea8f9eced72db85bb337a # v3.0.0

    # 4. gradlew에 권한 추가
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash
      
    # 5. build
    - name: Build with Gradle Wrapper
      run: ./gradlew clean build -x test
      shell: bash

    # # 6. 프로젝트 압축
    # - name: Make zip file
    #   run: zip -r ./practice-deploy.zip .
    #   shell: bash

    # 6. 프로젝트 압축 - jar, appspec.yml, shell
    - name: Generate deployment package
      run: |
        mkdir -p before-deploy
        cp scripts/*.sh before-deploy/
        cp appspec.yml before-deploy/
        cp build/libs/*.jar before-deploy/
        cd before-deploy && zip -r before-deploy *
        cd ../ && mkdir -p deploy
        mv before-deploy/before-deploy.zip deploy/$PROJECT_NAME.zip
      shell: bash
    
    # 7. AWS 권한 확인
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ap-northeast-2

    # 8. 압축한 프로젝트를 S3로 전송
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./practice-deploy.zip s3://$S3_BUCKET_NAME/practice-deploy.zip

    # 9. 배포 그룹으로 애플리케이션 전송
    - name: Code Deploy
      run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name $CODE_DEPLOY_GROUP_NAME --s3-location bucket=$S3_BUCKET_NAME, bundleType=zip, key=$PROJECT_NAME.zip
